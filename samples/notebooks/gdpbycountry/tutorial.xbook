[{"kind":1,"language":"markdown","value":"# XPath Notebook Introduction\n\nThis XPath Notebook introduces the fundamental concepts of a Notebook. A Notebook may be used for a range of purposes, including:\n\n- Data Analysis (of JSON or XML)\n- Experimentation with XPath\n- Distributed XPath Tutorials\n- Learning XPath\n## Notebook Cells\nEach XPath Notebook comprises a set of **Cells**."},{"kind":1,"language":"markdown","value":"### Markdown Cell ###\n1. The text rendered here is in a **Markdown cell**\n2. To edit the styled output here as Markdown, double-click on this cell\n3. To exit editing mode, press *⌃Enter*\n4. Headings in Markdown cells affect the **Outline view** tree shown in the **Explorer** Side Bar"},{"kind":1,"language":"markdown","value":"### Code Cell ###\n1. The first **Code cell** contains the XPath expression `'Hello '` || `'World'`\n2. A **Status Bar** is shown at the bottom of each Code cell\n3. The Status Bar item *XPath* identifies the cell's programming language\n4. Clicking on the **XPath** Status Bar item would allow you to switch other language options for the cell\n5. The `[]` label left of the Status Bar shows the execution order of the cell\n6. Select the Code cell by clicking on it\n7. Press *⌃Enter* to execute the selected Code cell\n8. The 'Execution Order' label now shows: `[1]`\n9. On success, the Status Bar should show something like: `✔︎ 0.2s`"},{"kind":1,"language":"markdown","value":"### Output cell\n1. A new **Output cell**, below the Code cell, now shows the result: `\"Hello World\"`\n2. The default Output cell mimetype is `application/json`\n2. Use the `</>` button left of the cell to change the mimetype to `text/html`\n3. The Output cell now shows a 'table' with a single row and column"},{"kind":2,"language":"xpath","value":"'Hello ' || 'World'"},{"kind":1,"language":"markdown","value":"## Cell Output Types"},{"kind":1,"language":"markdown","value":"### JSON Output\n1. The default Cell output type is JSON - using the mimetype `application/json`\n2. XPath sequences and arrays are represented as JSON arrays\n3. XPath maps are represented as JSON objects with properties corresponding to map keys\n4. XPath nodes are represented as XPath strings with special highlighting\n5. Support for XPath types like `QName` that don't have a JSON equivalent is a **Work in Progress**"},{"kind":1,"language":"markdown","value":"#### Representing XPath Sequences and Arrays\n1. XPath sequences and arrays are both represented as JSON arrays\n2. When executed, the Code cell below results in an XPath sequence. Each sequence item is itself an array\n3. With the result output as JSON, the result is seen as an array of arrays"},{"kind":2,"language":"xpath","value":"['London', 25], \n['New York', 32]"},{"kind":1,"language":"markdown","value":"#### Representing XPath Maps\n1. XPath Maps are represented as JSON objects\n2. Map keys correspond to JSON object property names\n3. When JSON is parsed by XPath, JSON objects are processed as XPath maps\n3. If the Code cell below is executed, the result is a sequence of maps\n4. (In the JSON representation this is shown as an array of objects)"},{"kind":2,"language":"xpath","value":"map { 'City': 'London', 'Temperature': 22 },\nmap { 'City': 'New York', 'Temperature': 32 }\n"},{"kind":1,"language":"markdown","value":"#### Representing XML Nodes\n1. When XPath is executed the result may be an XML Node such as an Element or Arribute\n2. The result is represented in JSON as a string holding the XPath location of the node. \n3. Each XPath location string is prefixed with the Unicode Character 'OGHAM SPACE MARK' `U+1680`\n4. XPath location strings are identifiable by special syntax highlighting\n5. `CMD + click` on an XPath location to highlight the node in the XML source (currently the source file URI is assumed to be that of the context item)\n6. Executing the XPath below results in a sequence of XML Attribute nodes"},{"kind":2,"language":"xpath","value":"doc('gdpByCountry.xml')/countries/country[@region eq 'Europe']/@name"},{"kind":1,"language":"markdown","value":"#### Representing Primitive Types\n\n1. The most basic XPath types are supported with their JSON equivalent\n2. The string equivalent of XPath types such as `QName` are used\n3. An XPath empty-sequence is currently represented as `null` - in future this may changed to `[]`"}]